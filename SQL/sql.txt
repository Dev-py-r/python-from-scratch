For example, the SHOW DATABASES command lists the databases managed by the server

SHOW COLUMNS FROM customers

SELECT column_list
FROM table_name

SELECT FirstName FROM customers

The SELECT statement is used to select data from a database.
The result is stored in a result table, which is called the result-set.

SELECT firstname from customer
select city from customer

SQL is case insensitive.
It is common practice to write all SQL commands in upper-case.

SELECT FirstName, LastName, City 
FROM customers;

select firstname,Lastname, city
from customers;

Selecting All Columns
SELECT * FROM customers;

The DISTINCT Keyword
SELECT DISTINCT City FROM customers; 


In situations in which you have multiple duplicate records in a table, it might make more sense to return only unique records, instead of fetching the duplicates.

The LIMIT Keyword

SELECT ID, FirstName, LastName, City
FROM customers LIMIT 5;


By default, all results that satisfy the conditions specified in the SQL statement are returned. However, sometimes we need to retrieve just a subset of records. In MySQL, this is accomplished by using the LIMIT keyword.

The LIMIT Keyword

You can also pick up a set of records from a particular offset.
In the following example, we pick up four records, starting from the third position:

SELECT ID, FirstName, LastName, City
 FROM customers LIMIT 3, 4;

Order By

ORDER BY is used with SELECT to sort the returned data.

SELECT * FROM customers
ORDER BY FirstName;

Sorting Multiple Columns

ORDER BY can sort retrieved data by multiple columns. 

SELECT * FROM customers 
ORDER BY LastName, Age;

The WHERE Statement

The WHERE clause is used to extract only those records that fulfill a specified criterion.

SELECT * FROM customers
WHERE ID = 7;

Comparison Operators and Logical Operators are used in the WHERE clause to filter the data to be selected.

SELECT * FROM customers
WHERE ID != 5;

select id,name
from customer where id>=12;

The BETWEEN Operator

SELECT * FROM customers 
WHERE ID BETWEEN 3 AND 7;

The BETWEEN operator selects values within a range. The first value must be lower bound and the second value, the upper bound.

Text Values

SELECT ID, FirstName, LastName, City 
FROM customers
WHERE City = 'New York';

When working with text columns, surround any text that appears in the statement with single quotation marks (').

Logical Operators

Logical operators can be used to combine two Boolean values and return a result of true, false, or null.

And True if both expressions are True
OR  True if either expression is True
IN  True if the operand is equal to one of a list of expressions
NOT Returns True if expression is not True

SELECT ID, FirstName, LastName, Age
FROM customers
WHERE Age >= 30 AND Age <= 40;

select * from customers
where state = 'CA'
And city = 'Hollywood'

AND OR
SELECT * FROM customers
WHERE City = 'New York'
AND (Age=30 OR Age=35);


The IN Operator

SELECT * FROM customers 
WHERE City IN ('New York', 'Los Angeles', 'Chicago');

The IN operator is used when you want to compare a column with more than one value



The NOT IN Operator

SELECT * FROM customers 
WHERE City NOT IN ('New York', 'Los Angeles', 'Chicago');

The NOT IN operator allows you to exclude a list of specific values from the result set.


The CONCAT Function

SELECT CONCAT(FirstName, ', ' , City) FROM customers;

The CONCAT function is used to concatenate two or more text values and returns the concatenating string.


The AS Keyword

SELECT CONCAT(FirstName,', ', City) AS new_column 
FROM customers;

A concatenation results in a new column. 

select concat(firstname, ',' city) as new_column
from customers;

Arithmetic Operators


The UPPER Function

SELECT FirstName, UPPER(LastName) AS LastName 
FROM employees;

The UPPER function converts all letters in the specified string to uppercase.
The LOWER function converts the string to lowercase.


SQRT and AVG

SELECT Salary, SQRT(Salary) 
FROM employees;

The SQRT function returns the square root of given value in the argument.


The SUM function

SELECT SUM(Salary) FROM employees;

The SUM function is used to calculate the sum for a column's values.


Subqueries

SELECT FirstName, Salary FROM employees 
WHERE  Salary > 3100
ORDER BY Salary DESC;

Subqueries

A single subquery will return the same result more easily.

SELECT FirstName, Salary FROM employees 
WHERE  Salary > (SELECT AVG(Salary) FROM employees) 
ORDER BY Salary DESC;


A subquery is a query within another query.


The Like Operator

For example, to select employees whose FirstNames begin with the letter A, you would use the following query:

SELECT * FROM employees 
WHERE FirstName LIKE 'A%';

select * from employees
where firstname like 'A%';

The following SQL query selects all employees with a LastName ending with the letter "s":

SELECT * FROM employees 
WHERE LastName LIKE '%s';

The LIKE keyword is useful when specifying a search condition within your WHERE clause.

The MIN Function

SELECT MIN(Salary) AS Salary FROM employees;

The MIN function is used to return the minimum value of an expression 

Drag and drop from the options below to complete the statement, which selects ''name'' and minimum of the "cost'' from ''items'', filtering by name and seller id.

SELECT name, MIN(cost) 
FROM items WHERE name 
LIKE '%boxes of frogs' AND 
seller_id IN (68, 6, 18)


Drag and drop from the options below to select name and age from ''students'', where age is greater than the average of all ages. Use a subquery to calculate the average value of age.

SELECT name, age 
FROM students
WHERE age >
(SELECT AVG(age)
 FROM students)



Joining Tables

All of the queries shown up until now have selected from just one table at a time.

One of the most beneficial features of SQL is the ability to combine data from two or more tables.


Drag and drop from the options below to select ''id'' from ''students''. Order the results by id, in descending order.

SELECT id FROM students
ORDER BY id DESC


Joining Tables

To join the two tables, specify them as a comma-separated list in the FROM clause:

SELECT customers.ID, customers.Name, orders.Name, orders.Amount
FROM customers, orders
WHERE customers.ID=orders.Customer_ID
ORDER BY customers.ID;


Custom names can be used for tables as well. You can shorten the join statements by giving the tables "nicknames":

SELECT ct.ID, ct.Name, ord.Name, ord.Amount
FROM customers AS ct, orders AS ord
WHERE ct.ID=ord.Customer_ID

Types of Join

The following are the types of JOIN that can be used in MySQL:
- INNER JOIN
- LEFT JOIN
- RIGHT JOIN


Rearrange the query to select the names of students and the names of the universities where those students study.

SELECT students.name, universities.name
FROM students, universities
WHERE
students.university_id=universities.id

LEFT JOIN

SELECT customers.Name, items.Name 
FROM customers LEFT OUTER JOIN items 
ON customers.ID=items.Seller_id;

The LEFT JOIN returns all rows from the left table, even if there are no matches in the right table.
ORDER BY ct.ID;


RIGHT JOIN

The RIGHT JOIN returns all rows from the right table, even if there are no matches in the left table.


Rearrange the code to select student names and all university names (use right join to show all university names).

SELECT students.names, universities.names
FROM students
RIGHT OUTER JOIN universities
ON students.university_id=universities.id

UNION

SELECT ID, FirstName, LastName, City FROM First
UNION
SELECT ID, FirstName, LastName, City FROM Second;

UNION combines multiple datasets into a single dataset, and removes any existing duplicates


UNION ALL 

SELECT ID, FirstName, LastName, City FROM First
UNION ALL
SELECT ID, FirstName, LastName, City FROM Second;


https://www.sololearn.com/Play/SQL

UNION ALL combines multiple datasets into one dataset, but does not remove duplicate rows.


Inserting Data

INSERT INTO Employees 
VALUES (8, 'Anthony', 'Young', 35);

SQL tables store data in rows, one row after another. The INSERT INTO statement is used to add new rows of data to a table in the database.


Alternatively, you can specify the table's column names in the INSERT INTO statement


INSERT INTO Employees (ID, FirstName, LastName, Age) 
VALUES (8, 'Anthony', 'Young', 35);



Inserting Data

It is also possible to insert data into specific columns only.

INSERT INTO Employees (ID, FirstName, LastName) 
VALUES (9, 'Samuel', 'Clark');

Updating Data

UPDATE Employees 
SET Salary=5000
WHERE ID=1;

The UPDATE statement allows us to alter data in the table.

Drag and drop from the options below to update the ''students'' table by changing the university's value to ''Stanford'' if the student's name is ''John''.

Deleting Data

DELETE FROM Employees
WHERE ID=1;

The DELETE statement is used to remove data from your table. DELETE queries work much like UPDATE queries.

Drag and drop from the options below to delete a row from ''people'' in which the ids falls in the range of 5 to 10.

DELETE FROM people
WHERE id>5 AND id<10;


SQL Tables

A single database can house hundreds of tables, each playing its own unique role in the database schema.

The CREATE TABLE statement is used to create a new table.

Creating a Table

CREATE TABLE Users
(
   UserID int,
   FirstName varchar(100), 
   LastName varchar(100),
   City varchar(100)
); 

Assume that you want to create a table called "Users" that consists of four columns: UserID, LastName, FirstName, and City.

Data Types

Data types specify the type of data for a particular column.

If a column called "LastName" is going to hold names, then that particular column should have a "varchar" (variable-length character) data type.

The most common data types:
Numeric
INT -A normal-sized integer that can be signed or unsigned.
FLOAT(M,D) - A floating-point number that cannot be unsigned. You can optionally define the display length (M) and the number of decimals (D).
DOUBLE(M,D) - A double precision floating-point number that cannot be unsigned. You can optionally define the display length (M) and the number of decimals (D).

Date and Time
DATE - A date in YYYY-MM-DD format.
DATETIME - A date and time combination in YYYY-MM-DD HH:MM:SS format.
TIMESTAMP - A timestamp, calculated from midnight, January 1, 1970
TIME - Stores the time in HH:MM:SS format.

String Type
CHAR(M) - Fixed-length character string. Size is specified in parenthesis. Max 255 bytes.
VARCHAR(M) - Variable-length character string. Max size is specified in parenthesis.
BLOB - "Binary Large Objects" and are used to store large amounts of binary data, such as images or other types of files.
TEXT - Large amount of text data.



Primary Key

CREATE TABLE Users
(
   UserID int,
   FirstName varchar(100),
   LastName varchar(100),
   City varchar(100),
   PRIMARY KEY(UserID)
); 

The UserID is the best choice for our Users table's primary key.
Define it as a primary key during table creation, using the PRIMARY KEY keyword.

Drag and drop from the options below to create a table with three columns: ''id'' as a primary key, username and password of type varchar.

CREATE TABLE test (
 id int,
 username varchar(30),
 password varchar(20),
 PRIMARY KEY (id)
);


SQL Constraints

SQL constraints are used to specify rules for table data.

The following are commonly used SQL constraints:
NOT NULL - Indicates that a column cannot contain any NULL value.
UNIQUE - Does not allow to insert a duplicate value in a column. The UNIQUE constraint maintains the uniqueness of a column in a table. More than one UNIQUE column can be used in a table.
PRIMARY KEY - Enforces the table to accept unique data for a specific column and this constraint create a unique index for accessing the table faster.
CHECK - Determines whether the value is valid or not from a logical expression.
DEFAULT - While inserting data into a table, if no value is supplied to a column, then the column gets the value set as DEFAULT.

For example, the following means that the name column disallows NULL values.
name varchar(100) NOT NULL

Fill in the missing parts so that the column ''username'' disallows empty values.

username varchar(50) 
NOT NULL


AUTO INCREMENT

Auto-increment allows a unique number to be generated when a new record is inserted into a table.

Often, we would like the value of the primary key field to be created automatically every time a new record is inserted.

By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.
Let's set the UserID field to be a primary key that automatically generates a new value:

UserID int NOT NULL AUTO_INCREMENT,
PRIMARY KEY (UserID)



Using Constraints

The example below demonstrates how to create a table using constraints.
CREATE TABLE Users (
id int NOT NULL AUTO_INCREMENT,
username varchar(40) NOT NULL, 
password varchar(10) NOT NULL,
PRIMARY KEY(id)
);

The following SQL enforces that the "id", "username", and "password" columns do not accept NULL values. We also define the "id" column to be an auto-increment primary key field.

create table users
(
user int not null auto_increment,
first varchar(100),
last varchar(100),
primary key(user)
);

ALTER TABLE

The ALTER TABLE command is used to add, delete, or modify columns in an existing table.
You would also use the ALTER TABLE command to add and drop various constraints on an existing table.

Consider the following table called People:

The following SQL code adds a new column named DateOfBirth:

ALTER TABLE People ADD DateOfBirth date;

Drag and drop from the options below to add a new column entitled ''specialty'' to the table ''students''.

ALTER TABLE students 
ADD specialty varchar(50);


Dropping

The following SQL code demonstrates how to delete the column named DateOfBirth in the People table.

ALTER TABLE People 
DROP COLUMN DateOfBirth

Renaming

The ALTER TABLE command is also used to rename columns:

ALTER TABLE People
CHANGE FirstName name varchar(100);

This query will rename the column called FirstName to name.


Drag and drop from the options below to rename the table ''people'' as ''humans''.

REPLACE TABLE people 
humans TABLE

Drag and drop from the options below to rename the table ''people'' as ''humans''.

RENAME TABLE people 
TO humans


Views

In SQL, a VIEW is a virtual table that is based on the result-set of an SQL statement.

A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.

Views allow us to:
- Structure data in a way that users or classes of users find natural or intuitive.
- Restrict access to the data in such a way that a user can see and (sometimes) modify exactly what they need and no more.
- Summarize data from various tables and use it to generate reports.

To create a view:
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition;

Let's create a view that displays each employee's FirstName and Salary.
CREATE VIEW List AS
SELECT FirstName, Salary
FROM  Employees;

Now, you can query the List view as you would query an actual table.
SELECT * FROM List;


create view list AS
slect first,salary
from employees

select * from list;


Drag and drop from the options below to create a view named ''temp'' for students with the highest marks.

CREATE VIEW temp AS 
SELECT id, name, mark 
FROM students 
ORDER BY mark DESC 
LIMIT 10;



Updating a View

The example below updates our List view to select also the LastName:
CREATE OR REPLACE VIEW List AS
SELECT FirstName, LastName, Salary
FROM  Employees;


Drag and drop from the options below to create a view named ''most_abs'' for the students with the greatest number of absences.

CREATE VIEW most_abs AS
SELECT id, name, absences
FROM students 
ORDER BY absences DESC 
LIMIT 10;

Drag and drop from the options below to create the table "users" to store website user logins and passwords.

CREATE TABLE users (
id INT NOT NULL 
AUTO_INCREMENT,
login VARCHAR(100),
password VARCHAR(100) )



Drag and drop from the options below to create a list of customers in the form "name is from city".

SELECT
CONCAT(name, ' is from ', city)
FROM customers;

Drag and drop from the options below to retrieve all students between the ages of 18 and 22.

SELECT name FROMstudents 
WHERE age 
BETWEEN 18 AND 22;

In the university's table containing student data, the students' last names have been omitted. Correct this by adding a new column to the table.

ALTER TABLE students
ADD last_name VARCHAR(100);

